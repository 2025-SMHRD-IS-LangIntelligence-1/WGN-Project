import pandas as pd
import numpy as np
import ast
import re
import pymysql
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
from konlpy.tag import Okt
import torch._dynamo

torch._dynamo.disable()
model = SentenceTransformer('all-MiniLM-L6-v2')
model = model.to('cpu')  # CPU 모드 강제
bert_model = SentenceTransformer('all-MiniLM-L6-v2')
okt = Okt()

# ====== 필요한 함수 모음 ======

# 공백으로 연결한 문자열을 반환하는 함수
def clean_tags(tag_data):
    # 1. 만약 데이터가 리스트이면, 각 요소를 공백(" ")으로 연결해서 문자열로 반환
    if isinstance(tag_data, list):
        return " ".join(tag_data)

    # 2. 만약 데이터가 문자열이면
    elif isinstance(tag_data, str):
        try:
            # 문자열이 리스트 형태의 문자열일 수 있으니, 안전하게 파싱
            parsed = ast.literal_eval(tag_data)

            # 파싱 결과가 리스트이면, 요소를 공백으로 연결해서 반환
            if isinstance(parsed, list):
                return " ".join(parsed)
            else:
                # 리스트가 아니면 원래 문자열 그대로 반환
                return tag_data
        except:
            # 파싱 실패 시(문자열이 리스트 형태가 아님) 원래 문자열 반환
            return tag_data

    # 3. 그 외 타입(None, 숫자 등)일 경우 빈 문자열 반환
    return ""

# 텍스트 내에서 명사만 추출하는 함수
def extract_nouns(text):
    if not isinstance(text, str):
        return []
    text = re.sub(r"[^\uAC00-\uD7A3a-zA-Z0-9\s]", "", text)
    return okt.nouns(text)

# 사용자가 입력한 query에서 특정 지역명(구)을 찾아 리스트로 반환하는 함수
def extract_regions_from_query(query, region_list):
    found = []
    for r in region_list:
        if r in query:     # query 안에 지역명이 포함되어 있으면
            found.append(r)
    return found

# 검색어 교정 함수
# 예: 사용자가 '햄버거'를 '햄버그'라고 잘못 썼으면 딕셔너리에서 찾아서 바꿈
def correct_query_from_dict(query: str, keyword_map: dict) -> str:
    for wrong, right in keyword_map.items():
        if wrong in query:
            # 틀린 단어를 올바른 단어로 교체
            query = query.replace(wrong, right)
    return query

# 최종 검색어 파싱 함수
def parse_query(query, keyword_map, info_keywords):
    # 1) 우선 교정 딕셔너리로 오타 교정
    query = correct_query_from_dict(query, keyword_map)

    # 2) 정규표현식으로 "단어 + (맛집|집)" 형태인지 검사
    # 예: "강남 맛집", "홍대집"
    m = re.search(r"([^\s]+)\s*(맛집|집)$", query.strip())

    rating_sort_flag = False  # 평점순 정렬 여부 기본 False

    if m:
        # 맛집, 집 앞 단어를 핵심 쿼리로 뽑음 (예: "강남")
        query_core = m.group(1)
        # 맛집, 집 키워드가 있으니 평점순 정렬 플래그 True
        rating_sort_flag = True
    else:
        # 맛집, 집 키워드 없으면 전체 검색어를 그대로 핵심 쿼리로 사용
        query_core = query.strip()

    # 3) 핵심 쿼리에서 명사만 추출
    nouns = extract_nouns(query_core)

    # 4) 검색어 전체(query)에 info_keywords에 포함된 단어가 있는지 확인
    # 예: ['분위기', '가격', '위치'] 같은 정보 관련 키워드들
    info_in_query = [kw for kw in info_keywords if kw in query]

    # 5) 핵심 명사 중 info_keywords, '맛집', '집' 단어 제외한 단어 리스트 생성
    query_nouns = [n for n in nouns if n not in info_keywords and n not in ['맛집', '집']]

    # 6) 최종 결과 리턴: (핵심 명사 리스트, 정보 키워드 리스트, 평점순 정렬 여부)
    return query_nouns, info_in_query, rating_sort_flag

# DB 연결 함수
def db_connect(query, columns) :
    print("DB 연결 중...")
    
    # DB 연결 설정
    conn = pymysql.connect(
    host='project-db-cgi.smhrd.com',
    port=3307,
    user='CGI_25IS_LI_P2_3',
    password='smhrd3',
    db='CGI_25IS_LI_P2_3',
    charset='utf8mb4'
    )
    
    with conn.cursor() as cursor:
      cursor.execute(query)
      rows = cursor.fetchall()
      df = pd.DataFrame(rows, columns=columns)
      conn.close()

    return df

# ============== 데이터 준비 ==============

def prepare_data():

    # ============== DB 연결 ==============

    query = """
        SELECT
            re.res_idx,
            re.res_category,
            re.res_name,
            re.res_region,
            re.res_addr,
            re.res_tag,
            re.res_ratings,
            m.res_menu,
            r.review_content,
            f.feed_content,
            c.res_con,
            rv.review_num
        FROM t_restaurant re
        LEFT JOIN (
            SELECT res_idx, GROUP_CONCAT(DISTINCT menu_name SEPARATOR ' ') AS res_menu
            FROM t_menu AS m
            GROUP BY res_idx
        ) m ON re.res_idx = m.res_idx
        LEFT JOIN (
            SELECT res_idx, GROUP_CONCAT(DISTINCT review_content SEPARATOR '|') AS review_content
            FROM t_review AS r
            GROUP BY res_idx
        ) r ON re.res_idx = r.res_idx
        LEFT JOIN (
            SELECT res_idx, COUNT(*) AS review_num
            FROM t_review
            GROUP BY res_idx
        ) rv ON re.res_idx = rv.res_idx
        LEFT JOIN (
            SELECT res_idx, GROUP_CONCAT(DISTINCT feed_content SEPARATOR '|') AS feed_content
            FROM t_feed AS f
            GROUP BY res_idx
        ) f ON re.res_idx = f.res_idx
        LEFT JOIN (
            SELECT res_idx, GROUP_CONCAT(DISTINCT res_con SEPARATOR '|') AS res_con
            FROM t_convenience AS c
            GROUP BY res_idx
        ) c ON re.res_idx = c.res_idx;
    """

    columns = [
        'res_idx', 'res_category', 'res_name', 'res_region', 'res_addr', 'res_tag',
        'res_ratings', 'res_menu', 'review_content', 'feed_content', 'res_con', 'review_num'
    ]

    df = db_connect(query, columns)
    
    # ============== 데이터 전처리 ==============

    print("데이터 전처리 중...")
    
    # review_number 숫자형 변환 또는 NaN 컬럼 생성
    if 'review_num' in df.columns:
        df['review_num'] = pd.to_numeric(df['review_num'], errors='coerce')
    
    # 브랜드 키워드 생성 (롯데리아 매장에 한해 추가)
    df['brand_keywords'] = df['res_name'].apply(
        lambda x: f"{x} 햄버거 버거 세트 감자튀김 치킨 샌드위치" if "롯데리아" in str(x) else ""
    )
    
    # res_menu에 브랜드 키워드 추가
    df['res_menu'] = df['res_menu'] + " " + df['brand_keywords']
    
    #brand_keywords 컬럼 제거
    df.drop(columns=['brand_keywords'], inplace=True)
    
    df['res_category'] = df['res_category'].replace("카테고리를 등록하세요", "")
    df['res_tag'] = df['res_tag'].replace("태그없음", "")
    df['res_con'] = df['res_con'].replace("편의시설 정보를 추가해주세요", "")
    
    # review_content 컬럼에서 명사만 추출
    if 'review_content' in df.columns:
        df['review_content'] = df['review_content'].apply(extract_nouns)
    else:
        df['review_content'] = [""] * len(df)
    
    # feed_content 컬럼에서 명사만 추출
    if 'feed_content' in df.columns:
        df['feed_content'] = df['feed_content'].apply(extract_nouns)
    else:
        df['feed_content'] = [""] * len(df)
    
    # review_content 컬럼 전처리
    if 'review_content' in df.columns:
        df['review_content'] = df['review_content'].apply(clean_tags)
    else:
        df['review_content'] = [""] * len(df)
    
    # feed_content 컬럼 전처리
    if 'feed_content' in df.columns:
        df['feed_content'] = df['feed_content'].apply(clean_tags)
    else:
        df['feed_content'] = [""] * len(df)
    
    # res_con 컬럼 전처리
    if 'res_con' in df.columns:
        df['res_con'] = df['res_con'].apply(clean_tags)
    else:
        df['res_con'] = [""] * len(df)
    
    # 세 개의 컬럼을 하나의 컬럼으로 결합
    df['text_data'] = (df['review_content'].astype(str) + " " + df['feed_content'].astype(str) + " " + df['res_con'].astype(str)).str.strip()
    
    # 필요 없는 컬럼 제거
    df.drop(columns=['review_content', 'feed_content', 'res_con'], inplace=True)
    
    # ============== 벡터화/임베딩 ==============

    print("벡터화 / 임베딩 중...")
    
    # 메뉴 데이터 벡터화
    menu_vectorizer = TfidfVectorizer(ngram_range=(1, 3))
    menu_matrix = menu_vectorizer.fit_transform(df['res_menu'])
    
    # 태그 데이터 벡터화
    tag_vectorizer = TfidfVectorizer()
    tag_matrix = tag_vectorizer.fit_transform(df['res_tag'])
    
    # 텍스트 데이터 벡터화
    text_data_vectorizer = TfidfVectorizer()
    text_data_matrix = text_data_vectorizer.fit_transform(df['text_data'])
    
    # Bert기반 문장 임베딩 생성기로 메뉴 데이터 임베딩
    bert_model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
    menu_embeddings = bert_model.encode(df['res_menu'].tolist(), convert_to_numpy=True, show_progress_bar=True)
    
    # ============== 메뉴 키워드 정규화 사전 / 카테고리 맵핑 / 음식점 정보 리스트 설정 ==============
    
    # 메뉴 키워드 정규화 사전 
    keyword_map = {
        "떡복기": "떡볶이", "떡복이": "떡볶이", "떡볶기": "떡볶이", "떡보끼": "떡볶이",
        "김밮": "김밥", "김밥말이": "김밥", "김빱": "김밥",
        "돈카츠": "돈까스", "돈가스": "돈까스", "돈까쓰": "돈까스",
        "비빔빱": "비빔밥", "비빔밤": "비빔밥",
        "짜장면": "자장면", "자짱면": "자장면", "짜짱면": "자장면",
        "라멘": "라멘", "라맨": "라멘",
        "햄바거": "버거",
        "피쟈": "피자", "피짜": "피자",
        "커리": "카레",
        "똠양꿍": "똠얌꿍"
    }
    
    # 카테고리 맵핑
    category_map = {
        "한식": ["김치찌개","된장찌개","순두부찌개","부대찌개","청국장","갈비탕","설렁탕","삼계탕","한우불고기","제육볶음",
    "오징어볶음","낙지볶음","쭈꾸미볶음","비빔밥","돌솥비빔밥","육회비빔밥","콩나물국밥","감자탕","추어탕",
    "해장국","칼국수","잔치국수","수제비","비빔국수","잡채","보쌈","족발","삼겹살","돼지갈비","한우등심",
    "돼지두루치기","닭볶음탕","닭도리탕","닭강정","찜닭","닭갈비","계란말이","김치전","해물파전","부침개",
    "떡볶이","김밥","순대","어묵탕","콩나물무침","시래기국","묵은지찜","코다리조림","갈비찜","고등어조림",
    "홍어삼합","홍어회","홍어무침","홍어찜","아귀찜","아귀탕","동태찌개","동태전","고등어구이","삼치구이",
    "갈치구이","꽁치구이","병어조림","굴비구이","서대회","전어구이","전어회","굴국밥","굴전","굴튀김",
    "장어구이","장어덮밥","추어탕","도가니탕","꼬리곰탕","수육","편육","모둠전","빈대떡","녹두전","콩전",
    "호박전","두부김치","두부조림","두부전","청포묵무침","묵밥","비지찌개","육개장","사골곰탕","우거지탕",
    "순대국","감자전","도토리묵","오징어순대","낙지호롱","꼬막무침","꼬막비빔밥","김치찜","동그랑땡",
    "호박죽","단호박죽","팥죽","검은콩밥","현미밥","흑미밥","새우장","간장게장","양념게장","꽃게탕",
    "꽃게찜","꽃게무침","바지락칼국수","바지락술찜","바지락찜","골뱅이무침","골뱅이소면","낙지연포탕",
    "삼합","묵은지고등어조림","묵은지김치찜","두루치기","고사리나물","고추장불고기","고추장찌개",
    "코다리찜","코다리강정","황태해장국","황태찜","황태무침","황태구이","감자조림","멸치볶음",
    "콩자반","진미채볶음","오징어채볶음","어묵볶음","시금치나물","도라지나물","고사리볶음",
    "무생채","김무침","쑥갓무침","상추겉절이","열무김치","총각김치","깍두기","파김치","갓김치",
    "동치미","백김치","깻잎장아찌","마늘장아찌","고추장아찌","매실장아찌","마늘쫑무침",
    "청양고추무침","명란젓","창란젓","젓갈","홍어애탕","연근조림","우엉조림","도라지무침",
    "콩비지전","들깨미역국","들깨감자탕","쑥국","냉이된장국","부추전","부추겉절이","삼계죽",
    "닭죽","전복죽","황태죽","굴죽","미역줄기볶음","애호박볶음","가지볶음","버섯볶음",
    "버섯전골","샤브샤브","불낙전골","해물전골","소고기전골","오리백숙","오리주물럭","오리훈제",
    "훈제삼겹살","돼지껍데기","막창","곱창","대창","소막창","양념막창","양념곱창", "육회", "육회비빔밥","김치부침개","부추부침개","파부침개","해물부침개","감자부침개","호박부침개",
    "고추부침개","버섯부침개","두부부침개","애호박부침개","동태부침개","명태부침개","동그랑부침개","가지부침개","새송이버섯부침개","표고버섯부침개",
    "녹두부침개","빈대부침개","홍합부침개","굴부침개","조개부침개","꼬막부침개","새우부침개","낙지부침개","오징어부침개","문어부침개",
    "홍어부침개","명란부침개","가리비부침개","황태부침개","멸치부침개","쭈꾸미부침개","가자미부침개","미더덕부침개","골뱅이부침개","아귀부침개"
    ],
        "중식": ["짜장면","짬뽕","간짜장","삼선짜장","삼선짬뽕","쟁반짜장","쟁반짬뽕","유산슬","팔보채","탕수육",
    "깐풍기","깐쇼새우","칠리새우","라조기","마파두부","동파육","고추잡채","멘보샤","볶음밥","해물볶음밥",
    "새우볶음밥","양주볶음밥","고추짬뽕","쟁반냉면","온면","중화냉면","마라샹궈","마라탕","마라롱샤",
    "마라향궈","꿔바로우","유린기","유린새우","지삼선","어향동고","어향가지","송이새우","산라탕","쏘팔코스",
    "해물짬뽕","굴짬뽕","해물탕면","홍콩반점짬뽕","짬뽕밥","짬뽕국물","양장피","유산슬덮밥","팔보채덮밥",
    "깐쇼새우덮밥","마라샹궈덮밥","해물우동","중화우동","짬뽕우동","짬뽕라면","짜장라면","마라라면",
    "차돌짬뽕","해물탕면","홍합짬뽕","조개짬뽕","홍합탕면","마라새우","해물사천탕","사천탕수육",
    "사천볶음밥","사천짜장","사천짬뽕","삼선탕수육","삼선우동","삼선볶음밥","북경오리","베이징덕",
    "광동식탕수육","광동식볶음밥","양고기마라샹궈","양고기마라탕","양고기샤브샤브","훠궈","훠궈소스",
    "훠궈육수","훠궈버섯","훠궈고기","훠궈해산물","훠궈푸주","훠궈두부","훠궈라면","훠궈볶음밥",
    "훠궈탕","훠궈매운탕","훠궈고추","훠궈마라","훠궈소고기","훠궈돼지고기","훠궈양고기","훠궈닭고기",
    "훈둔","군만두","찐만두","왕만두","샤오롱바오","딤섬","하가우","춘권","춘권튀김","춘권말이",
    "유부탕","중식탕면","중식냉면","홍쇼우육","라조육","고추라조육","중화비빔밥","깐풍두부",
    "탕수어","깐풍어","깐풍오징어","중화탕","중화탕면","고추기름국수","탄탄멘","탄탄면","우육면",
    "사천우육면","차돌우육면","토마토우육면","마라우육면","중화볶음국수","볶음우동","중화카레",
    "카레볶음밥","차돌볶음밥","차돌짜장","차돌짬뽕","차돌탕수육","차돌마라탕","해물마라탕","새우마라탕",
    "해물마라샹궈","새우마라샹궈","해산물마라샹궈","왕새우탕","해삼탕","중식해삼","해삼볶음","전가복",
    "연어샐러드중식","중식치킨","유린치킨","해파리냉채","오이냉채","중화해물샐러드","사천샐러드",
    "사천냉채","마파가지","마파가지덮밥","마파두부덮밥","마파연두부","중식연두부","꿔바육","중화죽",
    "전가복덮밥","중화마라샐러드","사천마라샐러드","차돌마라샐러드"
    ],
        "일식": ["라멘","쇼유라멘","돈코츠라멘","미소라멘","츠케멘","탄탄멘","시오라멘","카라이시오라멘","냉라멘","규동",
    "가츠동","텐동","오야코동","사케동","카이센동","스키야키","샤브샤브","스시","연어스시","참치스시",
    "광어스시","도미스시","초밥","사시미","사케사시미","참치사시미","광어사시미","도미사시미","우동",
    "가케우동","카레우동","냉우동","텐푸라우동","유부우동","야끼우동","소바","자루소바","카케소바",
    "텐자루소바","카레소바","히야시소바","야키소바","오코노미야키","타코야키","니쿠자카","니쿠자가",
    "가라아게","카라아게","에비후라이","에비카츠","돈카츠","히레카츠","로스카츠","치킨가츠","멘치카츠",
    "카츠산도","샌드카츠","규카츠","규스테키","규스테","스키야키나베","스키나베","니쿠우동","텐푸라",
    "에비텐","야사이텐","가키아게","가이텐스시","돈부리","규히츠마부시","히츠마부시","우나기동",
    "장어덮밥","우나기","우나기카바야키","우나기스시","우나기초밥","우나기롤","스시롤","마키스시",
    "후토마키","가쓰오다시","가쓰오부시","오차즈케","오차즈케연어","오차즈케우메","오차즈케타라코",
    "가케차즈케","오차즈케장어","오차즈케와사비","오차즈케참치","오차즈케가리","모찌","모찌나베",
    "나베","오뎅나베","오뎅","오뎅탕","일본식오뎅","다코야끼","규나베","니코미","카이센나베",
    "가이센나베","해물나베","미소나베","샤부샤부나베","카키후라이","굴튀김","굴덮밥","가키동",
    "일본식카레","카레라이스","가츠카레","치킨가츠카레","규카레","해물카레","오므라이스","오므카레",
    "오무라이스","데미글라스오므라이스","하야시라이스","나폴리탄","멘타이코파스타","일본식파스타",
    "멘타이코오니기리","오니기리","삼각김밥","규마요동","에비마요","에비마요동","에비동","에비텐동",
    "아나고동","아나고스시","아나고초밥","아나고사시미","이카스시","이카사시미","타코사시미",
    "타코스시","문어사시미","문어스시","호타테사시미","가리비사시미","가리비스시","핫토모토","로스가츠",
    "니혼슈","사케","쇼추","하이볼","일본식하이볼","유자사케","매실사케","유자쇼주","매실쇼주",
    "교자","일본식교자","교자라멘","교자세트","규탄","규탄스테이크","니쿠탄","참치타다키",
    "가쓰오타타키","참치타타키","가리비구이","가리비버터구이","버터오징어","버터관자구이",
    "버터옥수수","일본식샐러드","와후샐러드","야사이샐러드","해물샐러드","토마토샐러드","두부샐러드",
    "가라아게샐러드","치킨샐러드","감자샐러드","포테이토샐러드","야끼니쿠","야키토리","모츠나베",
    "모츠야끼","모츠니코미","규미소","규미소나베","나가사키짬뽕","일본식짬뽕","규동라멘","텐동라멘",
    "치즈돈카츠","치즈가츠동","치즈가츠카레","치즈규카츠","치즈돈부리","가츠나베","돈카츠나베","텐진동"
    ],
        "양식": ["파스타","토마토파스타","알리오올리오","봉골레파스타","까르보나라","로제파스타","바질페스토파스타",
    "새우크림파스타","해물파스타","베이컨파스타","미트파스타","라자냐","스파게티","볼로네제","엔초비파스타",
    "트러플파스타","해산물파스타","감바스","스테이크","티본스테이크","립아이","안심스테이크","채끝스테이크",
    "등심스테이크","샐러드","시저샐러드","그릭샐러드","연어샐러드","치킨샐러드","과일샐러드","푸실리샐러드",
    "리코타샐러드","리코타치즈샐러드","모짜렐라샐러드","카프레제","치즈샐러드","피자","페퍼로니피자",
    "하와이안피자","마르게리타피자","콤비네이션피자","불고기피자","베이컨피자","치즈피자","고르곤졸라피자",
    "포테이토피자","트러플피자","페스카토레","오븐스파게티","오븐치즈스파게티","리조또","새우리조또",
    "해물리조또","버섯리조또","치킨리조또","베이컨리조또","로제리조또","라이스그라탕","그라탕","치즈그라탕",
    "해산물그라탕","포크커틀릿","포크커틀렛","비프커틀릿","비프커틀렛","치킨커틀릿","치킨커틀렛","포크찹",
    "포크챱","비프찹","비프챱","미트볼","미트로프","프렌치프라이","감자튀김","트러플감자튀김","버팔로윙",
    "치킨윙","바비큐치킨","바베큐치킨","바비큐립","베이비백립","백립","립스테이크","바비큐립세트","치킨랩",
    "터키샌드위치","클럽샌드위치","BLT샌드위치","햄치즈샌드위치","햄버거","치즈버거","베이컨버거",
    "수제버거","아보카도버거","더블치즈버거","트러플버거","파니니","브루스케타","바게트","갈릭브레드",
    "갈릭바게트","토스트","프렌치토스트","프렌치어니언수프","양송이스프","양파스프","토마토스프","콘스프",
    "브로콜리스프","클램차우더","랍스터비스크","감자스프","크림스프","버섯스프","비프스튜","양송이비프스튜",
    "비프스튜파이","로스트치킨","로스트비프","로스트포크","로스트포테이토","로스트양","오븐구이치킨",
    "오븐구이소세지","소세지그릴","소세지플래터","소세지볶음","소세지야채볶음","소세지야끼","치즈소세지",
    "소세지스튜","프리타타","퀘사디아","타코","타코샐러드","부리또","나초","칠리","칠리콘카르네",
    "맥앤치즈","크로켓","크로크무슈","오믈렛","수플레","계란오믈렛","치즈오믈렛","채소오믈렛","스페니쉬오믈렛",
    "포치드에그","베네딕트","에그베네딕트","에그플로렌틴","라따뚜이","무쌈라피","카프레제샐러드","브리치즈",
    "고트치즈","까망베르치즈","체다치즈","블루치즈","스위스치즈","에멘탈치즈","브리오슈","브리오슈번",
    "치아바타","포카치아","올리브브레드","허브포카치아","샤퀴테리","안티파스토","프로슈토","살라미","판체타"
    ],
    "고기집": ["삼겹살","항정살","가브리살","목살","오겹살","돼지갈비","소갈비","한우등심","한우안심","한우특수부위",
    "한우살치살","한우차돌박이","한우토시살","한우안창살","한우갈비살","한우꽃등심","한우부채살","한우우둔살",
    "한우양지","한우설도","한우사태","소등심","소안심","소갈비살","소꽃등심","소차돌박이","소토시살","소안창살",
    "소부채살","소우둔살","소사태","돼지삼겹살","돼지목살","돼지항정살","돼지갈매기살","돼지등심","돼지안심",
    "돼지갈비살","돼지특수부위","돼지껍데기","돼지막창","돼지곱창","돼지대창","돼지염통","돼지소시지","돼지베이컨",
    "돼지훈제","양념갈비","돼지양념갈비","소양념갈비","LA갈비","돼지주물럭","돼지불고기","소불고기","돼지바비큐",
    "소바비큐","바비큐폭립","숯불삼겹살","숯불목살","숯불갈비","숯불양념갈비","숯불돼지갈비","숯불소갈비","숯불스테이크",
    "숯불주물럭","숯불불고기","숯불왕갈비","숯불LA갈비","숯불오겹살","숯불등심","숯불안심","숯불특수부위","숯불곱창",
    "숯불막창","숯불대창","한돈삼겹살","한돈목살","한돈오겹살","한돈갈비","한돈등심","한돈안심","한돈바비큐","한돈갈매기살",
    "소고기모둠","돼지고기모둠","한우모둠","모둠고기","모둠한판","모둠스페셜","참숯삼겹살","참숯목살","참숯오겹살",
    "참숯갈비","참숯돼지갈비","참숯소갈비","참숯스테이크","참숯주물럭","참숯불고기","참숯왕갈비","참숯LA갈비",
    "참숯안심","참숯특수부위","참숯곱창","참숯막창","참숯대창","생삼겹살","생목살","생오겹살","생갈비","생돼지갈비",
    "생소갈비","생스테이크","생주물럭","생불고기","생왕갈비","생LA갈비","생안심","생특수부위","훈제삼겹살","훈제목살",
    "훈제오겹살","훈제갈비","훈제돼지갈비","훈제소갈비","훈제스테이크","훈제주물럭","훈제불고기","훈제왕갈비",
    "훈제LA갈비","훈제안심","훈제특수부위","양고기","양갈비","양등심","양안심","양허리살","양갈비살","양등갈비",
    "양양념갈비","양양념구이","양꼬치","양꼬치구이","양꼬치양념","양꼬치소금","양꼬치마늘","양꼬치특제","양꼬치스페셜",
    "양꼬치직화","양꼬치바비큐","양꼬치참숯","양꼬치불향","양꼬치훈제","양꼬치특수부위","닭갈비","숯불닭갈비","간장닭갈비",
    "매운닭갈비","치즈닭갈비","닭꼬치","닭꼬치구이","닭꼬치소금","닭꼬치양념","닭꼬치참숯","닭꼬치바비큐","닭꼬치훈제"
    ],
    "카페": ["아메리카노","카페라떼","카푸치노","바닐라라떼","카라멜마끼아또","카페모카","돌체라떼","연유라떼","콜드브루",
    "콜드브루라떼","콜드브루바닐라","콜드브루크림","플랫화이트","라떼","헤이즐넛라떼","토피넛라떼","연유카페라떼",
    "민트라떼","고구마라떼","초코라떼","말차라떼","그린티라떼","홍차라떼","차이티라떼","얼그레이라떼","블랙티라떼",
    "오트라떼","코코넛라떼","피스타치오라떼","우유","초코우유","딸기우유","바나나우유","흑임자라떼","흑임자밀크",
    "에스프레소","더블샷에스프레소","롱블랙","마키아또","리스트레토","아포가토","카라멜라떼","카라멜모카","화이트모카",
    "더치커피","더치라떼","더치바닐라","더치초코","아인슈페너","바닐라아인슈페너","헤이즐넛아인슈페너","카라멜아인슈페너",
    "아이스티","레몬아이스티","복숭아아이스티","망고아이스티","자몽아이스티","유자아이스티","청포도아이스티",
    "얼그레이티","잉글리쉬브렉퍼스트","다즐링티","아쌈티","페퍼민트티","캐모마일티","자스민티","유자차","레몬차",
    "생강차","대추차","매실차","홍차","녹차","녹차라떼","허브티","밀크티","타피오카밀크티","흑당버블티","타로밀크티",
    "망고밀크티","얼그레이밀크티","홍차밀크티","녹차밀크티","딸기밀크티","코코넛밀크티","화이트펄밀크티",
    "초코밀크티","유자밀크티","허니밀크티","허니자몽티","허니레몬티","허니유자티","허니블랙티","허니홍차",
    "허니얼그레이","스무디","딸기스무디","망고스무디","블루베리스무디","요거트스무디","플레인요거트스무디",
    "초코스무디","바나나스무디","그린티스무디","쿠키앤크림스무디","밀크쉐이크","바닐라쉐이크","초코쉐이크",
    "딸기쉐이크","망고쉐이크","오레오쉐이크","피스타치오쉐이크","버터스카치쉐이크","카페쉐이크","카라멜쉐이크",
    "생과일주스","딸기주스","바나나주스","키위주스","수박주스","멜론주스","망고주스","오렌지주스","자몽주스",
    "포도주스","청포도주스","토마토주스","당근주스","사과주스","파인애플주스","딸기바나나주스","딸기키위주스",
    "딸기망고주스","커피프라푸치노","카라멜프라푸치노","모카프라푸치노","바닐라프라푸치노","그린티프라푸치노",
    "쿠키프라푸치노","망고프라푸치노","딸기프라푸치노","민트초코프라푸치노","티라미수프라푸치노","버블라떼"
    ],
    "분식" : ["떡볶이","국물떡볶이","로제떡볶이","치즈떡볶이","라볶이","쌀떡볶이","밀떡볶이","즉석떡볶이","짜장떡볶이",
    "카레떡볶이","마라떡볶이","매운떡볶이","치즈라볶이","떡라면","라면","김치라면","치즈라면","해물라면",
    "짜장라면","매운라면","삼양라면","참깨라면","불닭볶음면","짜파게티","우동","김밥","참치김밥","치즈김밥",
    "야채김밥","소고기김밥","돈까스김밥","고추김밥","멸치김밥","유부초밥","충무김밥","계란김밥","김치김밥",
    "왕김밥","모듬김밥","햄김밥","참치마요김밥","치킨마요김밥","떡꼬치","오뎅","어묵","어묵탕","튀김어묵",
    "꼬치어묵","어묵볶음","순대","순대볶음","순대튀김","찹쌀순대","고추튀김","김말이튀김","새우튀김",
    "야채튀김","만두튀김","오징어튀김","고구마튀김","라면사리","모듬튀김","떡튀김","김말이","핫도그",
    "감자핫도그","치즈핫도그","소세지핫도그","오징어핫도그","찹쌀핫도그","왕핫도그","빅핫도그",
    "계란빵","붕어빵","호떡","꽈배기","찹쌀도너츠","찹쌀호떡","호두과자","군고구마","군밤","타코야끼",
    "토스트","길거리토스트","햄치즈토스트","불고기토스트","참치마요토스트","치킨마요토스트","피자토스트",
    "핫케이크","팬케이크","핫도그빵","고구마빵","밤만주","계란샌드위치","샐러드샌드위치","햄샌드위치",
    "불고기샌드위치","참치샌드위치","치킨샌드위치","감자샌드위치","에그마요샌드위치","에그샐러드샌드위치",
    "소세지빵","피자빵","고로케","카레고로케","감자고로케","치즈고로케","야채고로케","옥수수고로케",
    "라면김밥","비빔만두","군만두","찐만두","김치만두","고기만두","왕만두","새우만두","갈비만두","납작만두",
    "피자만두","고로케만두","떡만두","만둣국","칼만두","냉모밀","냉우동","냉라면","라볶이세트","분식세트",
    "치즈떡라면","김치떡라면","참치마요밥","치킨마요밥","불고기마요밥","스팸마요밥","제육마요밥",
    "새우마요밥","돈까스덮밥","치킨덮밥","오므라이스","돈까스","치킨까스","새우까스","생선까스",
    "고구마치즈볼","치즈볼","감자치즈볼","콘치즈","모짜렐라치즈볼","로제라볶이","크림라볶이","매운라볶이"
    ],
    "디저트" : ["티라미수","마카롱","휘낭시에","마들렌","스콘","쿠키","초코쿠키","오트밀쿠키","쇼트브레드","버터쿠키",
    "초코칩쿠키","견과쿠키","크랜베리쿠키","머핀","초코머핀","블루베리머핀","바나나머핀","카라멜머핀","케이크",
    "치즈케이크","레어치즈케이크","베이크드치즈케이크","뉴욕치즈케이크","블루베리치즈케이크","딸기치즈케이크",
    "쇼콜라케이크","가토쇼콜라","밀크레이프","롤케이크","생크림케이크","딸기케이크","망고케이크","초코케이크",
    "녹차케이크","말차케이크","티라미수케이크","고구마케이크","당근케이크","바나나케이크","사과파이","애플파이",
    "타르트","과일타르트","레몬타르트","키위타르트","망고타르트","딸기타르트","블루베리타르트","초코타르트",
    "바나나타르트","피칸타르트","호두타르트","견과타르트","브라우니","초코브라우니","오레오브라우니",
    "피칸파이","호두파이","펌킨파이","치즈타르트","치즈타르트","밀푀유","슈크림","슈크림빵","에클레어","몽블랑",
    "까눌레","도넛","초코도넛","시나몬도넛","딸기도넛","바나나도넛","찹쌀도넛","팥도넛","라즈베리도넛","볼케이크",
    "푸딩","바닐라푸딩","망고푸딩","초코푸딩","커스터드푸딩","캐러멜푸딩","요거트푸딩","코코넛푸딩","젤리",
    "망고젤리","딸기젤리","라즈베리젤리","포도젤리","블루베리젤리","레몬젤리","귤젤리","석류젤리","홍시젤리",
    "무스","딸기무스","망고무스","라즈베리무스","초코무스","레몬무스","패션후르츠무스","요거트무스","바닐라무스",
    "아이스크림","바닐라아이스크림","초코아이스크림","딸기아이스크림","민트초코아이스크림","쿠키앤크림",
    "망고아이스크림","녹차아이스크림","홍차아이스크림","요거트아이스크림","오레오아이스크림","카라멜아이스크림",
    "바나나아이스크림","피스타치오아이스크림","라즈베리아이스크림","치즈아이스크림","티라미수아이스크림",
    "와플","플레인와플","딸기와플","망고와플","바나나와플","초코와플","녹차와플","생크림와플","누텔라와플",
    "젤라또","딸기젤라또","망고젤라또","라즈베리젤라또","초코젤라또","녹차젤라또","피스타치오젤라또","바닐라젤라또",
    "카라멜젤라또","홍차젤라또","치즈젤라또","빙수","팥빙수","인절미빙수","망고빙수","딸기빙수","초코빙수",
    "녹차빙수","홍차빙수","티라미수빙수","메론빙수","오레오빙수","요거트빙수","수박빙수","자몽빙수","과일빙수",
    "통통빙수","쉐이크","초코쉐이크","딸기쉐이크","바나나쉐이크","망고쉐이크","커피쉐이크","쿠키쉐이크",
    "요거트쉐이크","카라멜쉐이크","바닐라쉐이크","티라미수쉐이크","라즈베리쉐이크","아포가토","쿠키샌드",
    "아이스샌드","아이스샌드쿠키","마시멜로","마시멜로쿠키","마시멜로케이크","마시멜로바","팝콘","카라멜팝콘",
    "초코팝콘","치즈팝콘","버터팝콘","허니팝콘","프레첼","초코프레첼","솔티드프레첼","카라멜프레첼","크루아상",
    "크루아상샌드위치","초코크루아상","아몬드크루아상","버터크루아상","생크림크루아상","피낭시에","마들렌",
    "쇼콜라","바크초콜릿","트뤼플","생초콜릿","브라우니쿠키","녹차쿠키","홍차쿠키","오렌지쿠키","레몬쿠키",
    "라즈베리쿠키","코코넛쿠키","아몬드쿠키","호두쿠키","견과쿠키","쌀쿠키","초코칩쿠키","땅콩쿠키",
    "카라멜쿠키","밤타르트","밤케이크","밤무스","밤빵","밤파이","밤크림","밤슈크림","밤롤케이크","밤와플",
    "밤쿠키","밤마들렌","밤푸딩","밤젤리","밤크루아상","밤스콘","밤휘낭시에","밤마카롱","밤빙수","밤도넛",
    "밤초콜릿","밤에끌레어","밤까눌레","밤에끌레어"
    ],
    "안주" : ["골뱅이무침", "오징어채무침", "노가리", "진미채", "쥐포", "먹태", "황태채", "황태무침", "육포", "치즈스틱",
    "콘치즈", "버터오징어", "마른오징어", "땅콩버터오징어", "과메기", "훈제오리", "훈제연어", "황도", "사과슬라이스", "토마토절임",
    "모듬소세지", "비엔나볶음", "소세지야채볶음", "콘버터", "감자튀김", "웨지감자", "어니언링", "양념감자", "치즈볼", "치킨너겟",
    "순살치킨", "뼈없는닭발", "무뼈닭발", "닭발볶음", "매운닭발", "닭날개구이", "닭똥집볶음", "닭껍데기", "마늘닭똥집", "치즈닭갈비",
    "곱창볶음", "대창볶음", "막창볶음", "야채곱창", "오돌뼈", "불오징어볶음", "낙지호롱", "쭈꾸미볶음", "낙지젓", "창란젓",
    "명란젓", "오징어젓", "어리굴젓", "홍어무침", "홍어삼합", "돼지껍데기", "불막창", "마늘껍데기", "계란말이", "치즈계란말이",
    "스크램블에그", "반숙계란", "온천계란", "계란후라이", "계란찜", "김치전", "해물파전", "부추전", "고기전", "동그랑땡",
    "두부김치", "두부부침", "두부조림", "양념두부", "깻잎두부", "오뎅탕", "어묵탕", "우동", "가락국수", "라면사리볶음",
    "불라면", "치즈라면", "참치라면", "떡볶이", "마늘떡볶이", "닭볶음탕", "찜닭", "파닭", "마늘치킨", "간장치킨",
    "양념치킨", "허니버터치킨", "깐풍치킨", "치즈불닭", "핫도그", "김말이", "튀김만두", "새우튀김", "고추튀김", "깻잎튀김",
    "낙지튀김", "버섯튀김", "감자채전", "감자샐러드", "마카로니샐러드", "단호박샐러드", "마늘빵", "크루통", "마요옥수수", "스팸구이",
    "스팸김치볶음", "스팸계란부침", "소세지김치볶음", "참치김치볶음", "멸치볶음", "진미채볶음", "매콤멸치볶음", "무말랭이무침", "열무무침", "간장게장",
    "양념게장", "낙지젓무침", "문어숙회", "연어샐러드","오징어순대", "김치찜", "돼지김치볶음", "참치김치전", "묵무침", "도토리묵무침", "청포묵", "묵사발", "양념깻잎", "간장깻잎무침",
    "비빔국수", "열무국수", "쫄면", "매운비빔쫄면", "마라떡볶이", "마라만두", "마라삼겹살", "마라샤브", "마라순대", "바비큐폭립"
    ],
    "떡" : ["가래떡","절편","백설기","인절미","쑥인절미","콩고물인절미","깨인절미","쑥절편","쑥개떡","쑥송편",
    "송편","깨송편","콩송편","밤송편","대추송편","단호박송편","쑥송편","삼색송편","찹쌀떡","콩찰떡",
    "팥찰떡","쑥찰떡","깨찰떡","녹두찰떡","단호박찰떡","밤찰떡","잣찰떡","쑥떡","약식","약밥",
    "경단","팥경단","깨경단","쑥경단","오색경단","콩경단","녹두경단","찹쌀경단","두텁떡","화전",
    "송화전","진달래화전","쑥화전","백설기말이","단호박백설기","고구마백설기","초코백설기","딸기백설기","메론백설기","치즈백설기",
    "치즈인절미","치즈떡","치즈경단","고구마떡","고구마인절미","단호박떡","단호박인절미","감자떡","감자인절미","호박떡",
    "호박인절미","흑임자떡","흑임자인절미","깨떡","깨절편","옥수수떡","옥수수인절미","참깨떡","참깨인절미","콩떡",
    "콩절편","콩찹쌀떡","콩설기","팥설기","초코설기","딸기설기","녹차설기","말차설기","고구마설기","단호박설기",
    "꿀떡","쑥꿀떡","참깨꿀떡","팥꿀떡","인절미꿀떡","치즈꿀떡","메밀떡","메밀인절미","메밀송편","메밀경단",
    "현미떡","현미인절미","현미설기","보리떡","보리인절미","보리설기","오메기떡","쑥오메기떡","콩오메기떡","팥오메기떡",
    "송화떡","송화설기","모시떡","모시인절미","모시송편","모시경단","삼색떡","삼색송편","삼색경단","오색떡"
    ],
    "아시안" : ["쌀국수","소고기쌀국수","닭고기쌀국수","해물쌀국수","매운쌀국수","분보후에","분짜","분남보","반쎄오","반미",
    "짜조","짜조샐러드","짜조분짜","짜조쌀국수","고이꾸온","네엠누엉","분가","퍼가","분가오","반쎄오롤",
    "팟타이","팟씨유","팟끄라파오무쌉","팟카파오","팟까파오누아","팟까파오까이","카오팟","카오팟까이","카오팟꿍","카오팟누아",
    "카오팟푸","카오팟톰얌","카오팟카레","카오팟파인애플","카오카무","카오만까이","카오카이짜오","카오카이파로","카오까파오","카이팟매무앙",
    "똠얌꿍","똠얌누아","똠얌까이","똠얌씨푸드","똠카까이","똠카꿍","똠카누아","쏨땀","뿌빳풍커리","깽끼여우완",
    "그린커리","옐로커리","레드커리","마사만커리","파낭커리","타이카레","인도커리","치킨티카마살라","버터치킨","팔락파니르",
    "달마카니","차나마살라","알루고비","알루마타","사모사","파코라","바지","치킨코르마","람코르마","로간조쉬",
    "비르야니","치킨비르야니","머튼비르야니","에그비르야니","프라운비르야니","플레인난","갈릭난","버터난","치즈난","라차파라타",
    "알루파라타","무라타","바터로티","풀카","탄도리치킨","타도리랍스터","탄두리프론","탄두리피쉬","파니르티카","치킨티카",
    "버터갈릭치킨","버터갈릭프론","커리누들","커리우동","커리라이스","태국식커리우동","카레락사","호키엔미","미고렝","나시고렝",
    "미시암","판당커리","락사","해산물락사","카레락사","아삼락사","카오소이","카레카오소이","치킨카오소이","크랩카오소이",
    "비프카오소이","카레국수","캄보디아누들","버마누들","라오스누들","타이누들샐러드","타이누들볶음","타이누들롤","포보","포타이",
    "포마라","포사테","인도차이","마살라차이","테타릭","타이밀크티","타이아이스티","타이녹차라떼","타이홍차라떼","판당라떼",
    "코코넛라떼","코코넛밀크티","망고스무디","망고요거트","망고스틱키라이스","망고샐러드","파파야샐러드","소프트쉘크랩커리","칠리크랩","싱가포르칠리크랩",
    "블랙페퍼크랩","호키엔미","하이난치킨라이스","차오꾸에이띠아오","차오꿰이티아오","반꿰이띠아오","삼발새우","삼발치킨","삼발소고기","삼발해산물",
    "사테","치킨사테","비프사테","포크사테","새우사테","오징어사테","피쉬사테","루미안","로티치나이","로티보양",
    "로티티슈","로티플레인","로티코인","로티치즈","로티버터","로티초콜릿","로티바나나","로티넛","로티콘덴스밀크","로티믹스",
    "나시르막","나시리막","나시르막치킨","나시르막비프","나시르막새우","카야토스트","파인애플라이스","타이오믈렛","타이오믈렛밥","타이비프샐러드",
    "타이시푸드샐러드","타이치킨샐러드","타이프론샐러드","야무운센","얌운센","얌운센샐러드","얌누아","얌까이","얌탈레","얌운센해물",
    "깽남프릭","깽끼여우","깽까이","깽파","깽무","깽누아","깽프릭","깽까이파","깽까이콩","깽까이마라",
    "라프","라프무","라프까이","라프누아","라프탈레","라프카이","라프라오","라프콩","라프양","라프누아라오"
    ],
    "회" : ["광어회","우럭회","도미회","농어회","감성돔회","참돔회","줄돔회","돌돔회","놀래미회","방어회"
    "부시리회","삼치회","참치회","황새치회","연어회","연어뱃살회","방어뱃살회","참치뱃살회","광어뱃살회","우럭뱃살회"
    "도미뱃살회","가자미회","광어가자미회","전갱이회","청어회","고등어회","전어회","볼락회","쥐치회","참소라회"
    "전복회","해삼회","멍게회","개불회","문어회","낙지회","주꾸미회","오징어회","갑오징어회","한치회"
    "꼴뚜기회","해삼내장회","멍게내장회","성게알회","홍어회","홍어삼합","숭어회","쏨뱅이회","도화뱅어회","꽁치회"
    "대구회","명태회","청어과메기","갈치회","기름치회","가다랑어회","황어회","빙어회","송어회","열기회"
    "개장어회","붕장어회","꽁치회","참돔사시미","광어사시미","연어사시미","참치사시미","도미사시미","농어사시미","방어사시미"
    "전어사시미","가자미사시미","고등어사시미","낙지사시미","오징어사시미","문어사시미","전복사시미","해삼사시미","멍게사시미","육회"
    "육사시미","말고기회","말사시미","새우회","단새우회","보리새우회","닭새우회","꽃새우회","도화새우회","왕새우회"
    "닭회","닭사시미","오리회","오리사시미","연어초밥회","광어초밥회","도미초밥회","참치초밥회","방어초밥회","전어초밥회"
    ],
        "전" : ["김치전","부추전","파전","해물파전","감자전","호박전","고추전","깻잎전","버섯전","두부전",
    "애호박전","동태전","명태전","동그랑땡","육전","동그랑전","산적","가지전","새송이버섯전","표고버섯전",
    "고구마전","청양고추전","도라지전","고사리전","쑥갓전","연근전","참나물전","콩나물전","김부각전","우엉전",
    "녹두전","빈대떡","홍합전","굴전","조개전","꼬막전","새우전","낙지전","오징어전","문어전",
    "홍어전","명란전","가리비전","황태전","멸치전","쭈꾸미전","가자미전","미더덕전","골뱅이전","아귀전",
    "돼지고기전","소고기전","닭고기전","생선살전","게살전","삼치전","갈치전","명태살전","코다리전","말이전",
    "치즈전","햄전","베이컨전","소시지전"
    ],
    "구이" : ["삼겹살구이","목살구이","항정살구이","가브리살구이","돼지갈비구이","LA갈비구이","소갈비구이","양념갈비구이","등심구이","안심구이",
    "차돌박이구이","토시살구이","업진살구이","부채살구이","꽃등심구이","치마살구이","우설구이","곱창구이","대창구이","막창구이",
    "닭갈비구이","닭다리구이","닭날개구이","닭봉구이","닭꼬치구이","훈제오리구이","오리로스구이","돼지껍데기구이","돼지머리구이","소머리구이",
    "장어구이","붕장어구이","아나고구이","갈치구이","삼치구이","고등어구이","꽁치구이","가자미구이","도미구이","참돔구이",
    "광어구이","우럭구이","농어구이","방어구이","전어구이","임연수구이","명태구이","황태구이","코다리구이","청어구이",
    "병어구이","서대구이","쥐치구이","볼락구이","참소라구이","전복구이","소라구이","가리비구이","조개구이","모시조개구이",
    "대합구이","키조개구이","홍합구이","굴구이","바지락구이","새우구이","왕새우구이","꽃새우구이","닭새우구이","랍스터구이",
    "게구이","킹크랩구이","대게구이","홍게구이","연어구이","참치구이","황새치구이","청새치구이","가다랑어구이","갈매기살구이",
    "스테이크구이","소시지구이","베이컨구이","햄구이","치즈구이","떡구이","고구마구이","옥수수구이","감자구이","버섯구이",
    "새송이버섯구이","표고버섯구이","팽이버섯구이","양송이버섯구이","가지구이","호박구이","고추구이","마늘구이","양파구이","파구이"
    ]
    }

    # 음식점 정보 리스트 설정
    info_keywords = [
        # 모임/행사/단체
        "단체", "회식", "모임", "워크샵", "송년회", "신년회", "동호회", "연말", "연초", "동창회", "동문회", "행사", "기념일", "생일", "파티", "축하",
        # 데이트/커플/친구
        "데이트", "소개팅", "커플", "연인", "친구", "우정", "썸", "미팅",
        # 가족/어린이
        "가족", "아이", "유아", "아동", "어린이", "어르신", "노인", "부모님", "부부", "3대", "가족모임",
        # 회의/비즈니스
        "미팅", "회의", "비즈니스", "접대", "상견례", "협업", "상담",
        # 분위기
        "조용", "아늑", "오붓", "감성", "고급", "깔끔", "트렌디", "인스타", "전망", "야경", "루프탑", "오션뷰", "뷰맛집", "인테리어", "분위기",
        # 시설
        "예약", "주차", "무료주차", "발렛", "공영주차", "포장", "배달", "무한리필", "셀프", "뷔페", "프라이빗룸", "룸", "개별룸", "별실", "대형룸",
        "야외", "테라스", "정원", "좌식", "바테이블", "테이블", "유아의자", "놀이방", "휠체어", "장애인", "와이파이", "무선인터넷", "충전", "콘센트",
        # 반려동물
        "반려동물", "애견", "애묘", "펫프렌들리",
        # 기타
        "방문포장", "포장가능", "브런치", "아침", "런치", "디너", "야식", "심야", "24시", "새벽", "조식", "중식", "석식", "혼밥", "혼술",
        "여행", "관광", "외국인", "학생", "교복", "맛집투어"
    ]

    return (
        df, menu_matrix, tag_matrix, text_data_matrix,
        menu_vectorizer, tag_vectorizer, text_data_vectorizer,
        menu_embeddings, category_map, info_keywords, keyword_map
    )

# ============== 음식점 추천 ==============

def recommend_with_reviewscore_auto(
    query, df,
    menu_matrix, tag_matrix, text_data_matrix,
    menu_vectorizer, tag_vectorizer, text_data_vectorizer,
    menu_embeddings,
    alpha=0.45, beta=0.1, gamma=0.25, delta=0.2,     # 각 유사도 점수 가중치
    keyword_bonus=1.2, text_data_bonus=1.0, min_menu_sim=0.01,
    category_map=None, info_keywords=None, keyword_map=None
):
    
    # --- [1] 쿼리 분석 ---

    print("쿼리 분석 중...")
    
    # 사용자 입력 query에서 명사/정보키워드/정렬플래그 추출
    query_nouns, info_in_query, rating_sort_flag = parse_query(query, keyword_map, info_keywords)

    # 유사도 계산에 쓸 텍스트 (명사 + 정보키워드 합치기)
    query_for_sim = " ".join(query_nouns + info_in_query)

    # --- [2] 지역 필터(광주 전체, 여러 구 가능) ---

    print("지역 필터 적용 중...")
    
    regions = ["동구", "서구", "남구", "북구", "광산구"]

    # 사용자가 입력한 query에서 포함된 구 리스트 추출
    region_in_query_list = extract_regions_from_query(query, regions)

    # 사용자가 "광주"만 썼을 경우 → 광주 전체 구로 해석
    if "광주" in query and not region_in_query_list:
        region_in_query_list = regions.copy()

    # query_nouns에서 지역 단어 제거 (지역명은 유사도 계산에서 제외)
    query_nouns = [n for n in query_nouns if n not in regions and n != "광주"]

    # 지역 필터 적용
    df_work = df.copy()
    if region_in_query_list:
        # 주소(address)에 해당 구 이름이 들어간 가게만 남김
        region_pattern = "|".join(region_in_query_list)
        df_work = df_work[df_work['res_addr'].str.contains(region_pattern, na=False)]

        # 가게 이름에 구명이 들어가는 경우는 제외 (ex. "북구회관" 같은 오탐 방지)
        for reg in region_in_query_list:
            df_work = df_work[~df_work['res_name'].str.contains(reg, na=False)]

        df_work = df_work.reset_index()
    else:
        df_work = df_work.reset_index()

    # 필터된 DataFrame에서 원본 인덱스 번호 추출 → 벡터 슬라이싱에 사용
    idxs = df_work['index'].values

    # --- [3] 유사도 계산 ---

    print("유사도 계산 중...")
    
    # 메뉴 TF-IDF 기반
    menu_sim = cosine_similarity(menu_vectorizer.transform([query_for_sim]), menu_matrix[idxs]).flatten()
    # 태그 TF-IDF 기반
    tag_sim = cosine_similarity(tag_vectorizer.transform([query_for_sim]), tag_matrix[idxs]).flatten()
    # 명사+정보 TF-IDF 기반
    text_data_sim = cosine_similarity(text_data_vectorizer.transform([query_for_sim]),text_data_matrix[idxs]).flatten()
    # BERT 임베딩 기반
    bert_sim = cosine_similarity(
        bert_model.encode([query_for_sim], convert_to_numpy=True),
        menu_embeddings[idxs]
    ).flatten()

    # --- [4] 점수 계산 ---

    print("점수 계산 중...")
    
    menu_weights, text_data_weights, final_scores = [], [], []
    for i in range(len(df_work)):
        # 각 후보 가게의 텍스트
        menu_text = str(df_work.iloc[i]['res_menu'])
        tag_text = str(df_work.iloc[i].get('res_tag', ''))
        text_data_text = str(df_work.iloc[i].get('text_data', ''))

        # 메뉴/태그에서 쿼리명사 등장 횟수 세기
        menu_weight = sum(menu_text.count(word) + tag_text.count(word) for word in query_nouns)
        # 명사정보 텍스트에서 정보키워드 등장 횟수 세기
        text_data_weight = sum(text_data_text.count(word) for word in info_in_query)

        # 평점 가중치
        rating = df_work.iloc[i]['res_ratings']
        rating_weight = 0
        if not pd.isna(rating):
            if rating >= 4.5: rating_weight = 0.5
            elif rating >= 4.0: rating_weight = 0.3
            elif rating >= 3.5: rating_weight = 0.1

        # 메뉴 유사도가 너무 낮으면 BERT 점수 거의 제거
        if menu_sim[i] < min_menu_sim:
            bert_sim[i] *= 0.05

        # 최종 점수 계산 (가중합)
        final_score = (
            (menu_sim[i] * alpha) +
            (tag_sim[i] * beta) +
            (bert_sim[i] * gamma) +
            (text_data_sim[i] * delta) +
            menu_weight * keyword_bonus +
            text_data_weight * text_data_bonus +
            rating_weight
        )

        menu_weights.append(menu_weight)
        text_data_weights.append(text_data_weight)
        final_scores.append(final_score)

    # 점수 컬럼 저장
    df_work['menu_sim'] = menu_sim
    df_work['tag_sim'] = tag_sim
    df_work['text_data_sim'] = text_data_sim
    df_work['bert_sim'] = bert_sim
    df_work['menu_weight'] = menu_weights
    df_work['text_data_weight'] = text_data_weights
    df_work['final_score'] = final_scores

    # --- [5] 카테고리/키워드 필터링 ---

    print("카테고리/키워드 필터링 중...")
    
    keyword = query_nouns[0] if len(query_nouns) == 1 else None
    exclude_terms = ["전복", "전골", "전주"]  # 특정 단어 포함 시 제외
    if keyword and category_map and keyword in category_map and len(keyword) == 1:
        # category_map에 매핑된 키워드만 허용
        cat_words = set(category_map[keyword])
        def has_cat(row):
            text = f"{row['menu_text']} {row.get('tag_text', '')} {row.get('store_name', '')}"
            if keyword == "전" and any(ex in text for ex in exclude_terms):
                return False
            return any(k in text for k in cat_words)
        df_filtered = df_work[df_work.apply(has_cat, axis=1)]
    else:
        # 강한 키워드 필터 → query_nouns 모두가 텍스트에 포함되어야 함
        def strong_keyword_filter(row):
            text = f"{row['res_menu']} {row.get('res_tag', '')} {row.get('res_name', '')}"
            if keyword == "전" and any(ex in text for ex in exclude_terms):
                return False
            if len(query_nouns) == 0:
                return True
            return all(kw in text for kw in query_nouns)
        df_filtered = df_work[df_work.apply(strong_keyword_filter, axis=1)]

    # --- [6] 정렬 ---

    print("정렬 중...")
    
    if rating_sort_flag:
        # 평점+리뷰 개수를 함께 고려한 랭킹 점수 계산
        if (df_filtered['res_ratings'].notna().sum() > 0) and (df_filtered['review_num'].notna().sum() > 0):
            r_min, r_max = df_filtered['res_ratings'].min(), df_filtered['res_ratings'].max()
            v_min, v_max = df_filtered['review_num'].min(), df_filtered['review_num'].max()
            df_filtered['norm_rating'] = (df_filtered['res_ratings'] - r_min) / (r_max - r_min) if r_max > r_min else 0.0
            df_filtered['norm_review'] = (df_filtered['review_num'] - v_min) / (v_max - v_min) if v_max > v_min else 0.0
            df_filtered['rank_score'] = (df_filtered['norm_rating'] + df_filtered['norm_review']) / 2
            df_filtered = df_filtered.sort_values(['rank_score', 'final_score'], ascending=[False, False])
        elif df_filtered['res_ratings'].notna().sum() > 0:
            df_filtered = df_filtered.sort_values(['res_ratings', 'final_score'], ascending=[False, False])
        elif df_filtered['review_num'].notna().sum() > 0:
            df_filtered = df_filtered.sort_values(['review_num', 'final_score'], ascending=[False, False])
        else:
            df_filtered = df_filtered.sort_values(['final_score'], ascending=[False])
    else:
        # 기본: 최종점수 → 평점 순 정렬
        df_filtered = df_filtered.sort_values(['final_score', 'res_ratings'], ascending=[False, False])

    # --- [7] 결과 반환 ---
    return df_filtered.head(30)['res_idx'].tolist()